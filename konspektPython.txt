язык с динамической типизацией
ТИПЫ ДАННЫХ 
int, float, boolean, string, list, None
type(переменная) - тип переменной
# комментарий
\n переход на новую строку
'hello "word'
print(a, '-', b, '-', c) вывод или 
print('{} - {} - {}'.format(a,b,c)) или print('{0} - {2} - {1}'.format(a,b,c)) - изменяем порядок
print(f'{a} - {b} - {c}') интерполяция
print(i, end=" ") вывод строкой с пробелами, а не столбиком
input() - ввод с терминала, строкой
int(input()) целые числа
float(input()) вещественные числа
/ деление в вещественное число
// деление в целых числах
** возведение в степень
round() - округление до целого по мат. правилам
round(число, 4) - округление до 4 знаков 
 Порядок мат. операцийЖ **, унарный+, унарный-, *, /, //, %, +, -
+= 5 - прибавить к переменной 5, *=5
Логические операции: >, <, >=, <=, ==, !=, not, and, or
пОРЯДОК ЛОГИЧЕСКИХ ОПЕРАЦИЙ: (), !, &, ||
is, is not, in, not in
----------
f=[1,2] (2 in f) это true, 2 содержится в f
f=[1,2] (not 2 in f) это false, 2 содержится в f
is_odd = f[0] % 2 == 0, или (not f[0] % 2) число 1 не четное
----------
if условие:
    действие
else:
    действие
----------
if условие:
    действие
elif условие:
    действие
elif условие:
    действие
else:
    действие
-------------
while условие:
    действие
    действие
    действие
-------------
while условие:
    действие
    действие
else:        - когда основное тело цикла перестает работать
    действие
    действие 
-------------
for i in итерируемый_объект:
    действие
    действие
-------------
range(10) от 0 до 9
range(1, 4) - 1,2,3
range(1, 4, 2) - третий аргумент приращение, выведет 1,3
----------------
базовые API для работы со строками
dir(srt) справка по методам строк
len(text) количество символов строки
text.count(text2) количество вхождений текста2 в текст
'часть строки' in text - true/false - поиск части строки
text.isDigit() - true/false - являются ли все символы строки числами
text.isLower() - true/false - являются ли все символы нижним регистром
text.replace('что_заменить', 'на_что_заменить')
for c in text: 
Срезы:
text='съешь еще этих мягких булок'
text[0] - с
text[4] - ь
text[len(text)-1] - к
text[-5] - б индекс с конца
text[:] - весь текст, 0 и последний символ можно не писать
text[:2] - съе 0 можно не писать
text[1:2] - ъе
text[len(text-2):] - ок
text[6:-18] - еще этих мягких
text[0:len(text):6] - сеикакл
text[::6] - сеикакл
text=text[2:9] + text[-5]+text[:2]
-----------
help(функция) - встроенная справка
------------
СПИСКИ
num = [1,2,3,4]
или
ran = range(1,6) - тип range
num = list(ran) - тип list (список, массив) будет содержать цифры от 1 до 5
num[0]=значение - присвоить значение
len(num) - длина списка
num.append(элемент) - добавляет в конец элемент
num.remove(элемент) - удаляет элемент
del num[индекс] - удалить элемент конкретного индекса
--------------------
ФУНКЦИИ
def имя_функции(агрумент):
    действие
    действие
    если нужно return

-------------------
math.sqrt(numb) - квадрат числа или  numb ** 0,5
print(f'{811 ** 0,5:0.4}') форматирование f строк, округление числа до 4 знаков
round(number) округление
-------------------
import random Подключение модуля рандома
random.random() — возвращает псевдослучайное число от 0.0 до 1.0
random.uniform(<Начало>, <Конец>) — возвращает псевдослучайное вещественное число в диапазоне
random.randint(<Начало>, <Конец>) — возвращает псевдослучайное целое число в диапазоне
random.choince(<Последовательность>) — возвращает случайный элемент из любой последовательности (строки, списка, кортежа):
random.randrange(<Начало>, <Конец>, <Шаг>) — возвращает случайно выбранное число из последовательности.
random.shuffle(<Список>) — перемешивает последовательность (изменяется сама последовательность).
